import type { NextPage } from "next";
import Head from "next/head";
import michiganStateSpartans from "../../public/michiganstatespartans.svg";

const Home: NextPage = () => {
   return (
      <>
         <Head>
            <title>Create T3 App</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>
         <div className="flex flex-row justify-center">
            <div className="flex flex-col items-center">
               <Percentage awayPercent={0.4} width={200}></Percentage>
               <div className="flex flex-row  items-center relative top-[-135px] ">
                  <img className="h-10  " src="/michiganwolverines.svg" alt="" />
                  <p className="text-[50px] mx-1">ï¼ </p>
                  <img className="h-10" src="/michiganstatespartans.svg" alt="" />
               </div>
               <div className="relative top-[-50px]">
                  <Spread awaySpread={14.5} />
               </div>
            </div>
         </div>
      </>
   );
};

const Percentage = ({ awayPercent, width }: { awayPercent: number; width: number }) => {
   return (
      <>
         <style jsx>{`
            @keyframes ${"rotateRight" + Math.round(awayPercent * 100).toString()} {
               from {
                  stroke-dashoffset: 301.59289474462014;
               }
               to {
                  stroke-dashoffset: ${301.59289474462014 - awayPercent * 301.59289474462014};
               }
            }

            @keyframes ${"rotateLeft" + Math.round(awayPercent * 100).toString()} {
               from {
                  stroke-dashoffset: 301.59289474462014;
               }
               to {
                  stroke-dashoffset: ${-(301.59289474462014 - (1 - awayPercent) * 301.59289474462014)};
               }
            }

            .enterRight {
               animation: ${"rotateRight" + Math.round(awayPercent * 100).toString()} 2s ease-in-out;
            }
            .enterLeft {
               animation: ${"rotateLeft" + Math.round(awayPercent * 100).toString()} 2s ease-in-out;
            }
         `}</style>

         <svg fill="none" strokeLinejoin="round" viewBox="11 11 106 106" width={width} height={width} className=" ">
            <g shapeRendering="geometricPrecision">
               <circle cx="64" cy="64" r="48" stroke="white" strokeWidth="10"></circle>
               <circle
                  className="-rotate-90 enterRight"
                  cx="64"
                  cy="64"
                  r="48"
                  stroke="#18453B"
                  strokeDasharray="301.59289474462014,301.59289474462014"
                  strokeDashoffset={301.59289474462014 - awayPercent * 301.59289474462014}
                  style={{
                     transformOrigin: "64px 64px",
                  }}
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="10"
               ></circle>

               <circle
                  className="-rotate-90 enterLeft"
                  cx="64"
                  cy="64"
                  r="48"
                  stroke="#FFCB05"
                  strokeDasharray="301.59289474462014,301.59289474462014"
                  strokeDashoffset={-(301.59289474462014 - (1 - awayPercent) * 301.59289474462014)}
                  style={{
                     transformOrigin: "64px 64px",
                  }}
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="10"
               ></circle>
            </g>
         </svg>
      </>
   );
};

const Spread = ({ awaySpread }: { awaySpread: number }) => {
   let svgDistance = Math.min(3326 * Math.log(awaySpread + 1), 11000);
   console.log(svgDistance);
   let pxDistance = svgDistance * (112.5 / 11000) + 112.5;

   console.log(pxDistance);
   return (
      <>
         <style jsx>{`
            @keyframes ${"slide" + Math.floor(svgDistance).toString()} {
               from {
                  width: 0;
               }
               to {
                  width: ${svgDistance};
               }
            }

            .slideIn {
               animation: ${"slide" + Math.floor(svgDistance).toString()} 1s ease-in-out;
            }
         `}</style>

         <div className="flex flex-col">
            <svg width="248.90" height="27.57" viewBox="0 0 24890 2757" fill="none">
               {/* <rect width="11000" height="2757" transform="matrix(-1 0 0 1 18355 0)" fill="#D9D9D9" /> */}
               <rect
                  className="slideIn"
                  x="-65"
                  y="65"
                  width={svgDistance}
                  height="2627"
                  transform="matrix(-1 0 0 1 12383 0)"
                  stroke="black"
                  strokeWidth="130"
               />
               <rect
                  className="slideIn"
                  x="65"
                  y="-65"
                  width={svgDistance}
                  height="2627"
                  transform="matrix(1 0 0 -1 12379 2627)"
                  stroke="black"
                  strokeWidth="130"
               />
               <path d="M12445 0V2678" stroke="black" strokeWidth="130" />
               <rect x="65" y="65" width="24760" height="2627" rx="935" stroke="black" strokeWidth="130" />
            </svg>

            <div className="w-full h-5  flex flex-row item-center justify-center">
               <p
                  className="absolute"
                  style={{
                     right: pxDistance,
                  }}
               >
                  {awaySpread * -1}
               </p>
               <p
                  className="absolute"
                  style={{
                     left: pxDistance,
                  }}
               >
                  {awaySpread}
               </p>
            </div>
         </div>
      </>
   );
};

export default Home;
